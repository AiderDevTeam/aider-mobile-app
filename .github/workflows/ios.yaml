name: Push iOS build on TestFlight

on:
  push:
    branches:
      - main

jobs:
  ios_deployment:
    runs-on: macos-latest
    env:
      APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
      APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER }}
      APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
      DISTRIBUTION_CERTIFICATE: ${{ secrets.DIST_CERTIFICATE_BASE64 }}
      DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.DIST_CERTIFICATE_PASSWORD }}
      PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Flutter SDK
        uses: flutter-actions/setup-flutter@v3
        with:
          channel: stable
          version: 3.24.0

      - name: Install dependencies & Lint check
        run: |
          flutter clean
          flutter pub get
#          flutter analyze --fatal-infos
          
      - name: Install the CodeMagic CLI
        run:  pip install codemagic-cli-tools

      - name: Initialize keychain
        run: keychain initialize

      - name: Set up Provisioning Profile
        run: |
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
          echo ${PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
          echo "Saved provisioning profile $PROFILE_PATH"   

      - name: Set up Distribution Certificate
        run: |
          # Check if certificate is empty
          if [ -z "$DISTRIBUTION_CERTIFICATE" ]; then
            echo "Error: DISTRIBUTION_CERTIFICATE is empty"
            exit 1
          fi
          
          # Debug certificate length (should be non-zero)
          echo "Certificate length: $(echo $DISTRIBUTION_CERTIFICATE | wc -c)"
          
          # Decode certificate and verify
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signingCertificate.p12
          if [ ! -s signingCertificate.p12 ]; then
            echo "Error: Failed to create valid p12 file"
            ls -l signingCertificate.p12
            exit 1
          fi
          
          # Create keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
          
          # Import certificate
          security import signingCertificate.p12 \
            -k ~/Library/Keychains/build.keychain \
            -P "$DISTRIBUTION_CERTIFICATE_PASSWORD" \
            -A
          
          # Set key partition list
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s \
            -k "" ~/Library/Keychains/build.keychain
          
          # Clean up
          rm signingCertificate.p12

      - name: Set up Code signing settings on Xcode project
        run: xcode-project use-profiles

      - name: Build IPA for Distribution
        run: |
          # Check if VERSION file exists
          if [ ! -f "VERSION" ]; then
            echo "1.0" > VERSION
            echo "Created VERSION file with default version 1.0"
          fi
          
          # Read version
          fileData=$(cat VERSION)
          IFS='.'
          read -a versionValue <<< "$fileData"
          
          # Calculate build number and name
          buildNumber=$(( ${versionValue[0]} * 1000000 + ${versionValue[1]} * 10000 + ${{ github.run_number }} ))
          buildName="${versionValue[0]}.${versionValue[1]}.${{ github.run_number }}"
          
          echo "Uploading build $buildName (build number: $buildNumber)"
          
          # Build IPA
          flutter build ipa \
            --release \
            --build-number=$buildNumber \
            --build-name=$buildName \
            --export-options-plist=$HOME/export_options.plist

      - name: Upload IPA to App Store Connect
        run: |
          APP_FILE=$(find $(pwd) -name "*.ipa")
          app-store-connect publish \
          --path "$APP_FILE" 

